# -*- coding: utf-8 -*-
"""
Created on Wed June 03 2015

@author: Vera
"""
import matplotlib.pyplot as mat
import random

class lipids(object):
	"""
	general class for all kinds of lipids
	with the head groups 'p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral', 
	'cdp'(for cdp-dg) and 'None'(for tag)
	possible ffa for sn2: C16:0, C16:1, C18:0, C18:1
	possible ffa for sn1: C16:1 C18:1
	"""
	def __init__(self, head, sn2, sn1):

		self.head_groups = ['p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral', 'cdp', 'None']
		self.sn2_options = ['C16:0', 'C16:1', 'C18:0', 'C18:1']		#unsaturated ffa not possible at the moment
		self.sn1_options = ['C16:0', 'C18:0']						#saturated, because unsaturated not possible at the moment

		self.head = head
		self.sn2 = sn2
		self.sn1 = sn1

	@property
	def head(self):
		return self.__head
	@head.setter
	def head(self, group):
		if group not in self.head_groups:
			raise TypeError('This is no head group.')
		self.__head = group

	@property
	def sn2(self):
		return self.__sn2
	@sn2.setter
	def sn2(self, chain):
		if chain not in self.sn2_options:
			raise TypeError('This is no possible sn2 chain.')
		self.__sn2 = chain

	@property
	def sn1(self):
		return self.__sn1
	@sn1.setter
	def sn1(self, chain):
		if chain not in self.sn1_options:
			raise TypeError('This is no possible sn1 chain.')
		self.__sn1 = chain

	


class precursors(object):
	"""
	class for all the small molecules that are needed to create the lipids
	subclasses will be pyruvate, acetyl_coa, acyl_coa, dhap
	attribute C: number of C-Atoms
	"""
	def __init__(self, C):
		self.C = C

	@property
	def C(self):
		return self.__C
	@C.setter
	def C(self, number):
		if not isinstance(number, int):
			raise TypeError('Number of C-Atoms must be an int.')
		self.__C = number


class pyruvate(precursors):
	"""
	Pyruvate is the main precursor for lipid synthesis and is produced in the glycolysis. Pyruvate is 
	transformed to Acetyl-CoA by the Pruvate dehydrogenase with release of CO2. 
	"""
	def __init__(self, C):
		super(pyruvate, self).__init__(C)


class acetyl_coa(precursors):
	"""
	Acetyl-CoA is generated by transformation of pyruvate. One Acetyl-CoA (C = 2) is one building block for the ffa
	"""
	def __init__(self, C):
		super(acetyl_coa, self).__init__(C)


class acyl_coa(precursors):
	"""
	Acyl-CoA = ffa
	2 ffa are needed to construct a lipid --> PA_synthase
	At the moment there are only saturated ffa
	"""
	def __init__(self, C):
		super(acyl_coa, self).__init__(C)
		#adding of an attribute saturation is missing

class dhap(precursors):
	"""
	DHAP is the backbone for the lipids. In PA_synthase we add 2 ffa to one DHAP-Molecule to have a PA_synthase
	DHAP is generated in the glycolysis
	"""
	def __init__(self, C):
		super(dhap, self).__init__(C)


class model:
	"""
	The model. 
	At the beginning we set the available number of pyruvate and DHAP in the start function
	acetyl_synthase produces Acetyl-CoA out of Pyruvate by releasing 1 CO2
	In the acyl_synthase reaction we use Acetyl-CoA to synthesise Acyl-CoA --> acyl_coa_list
	These ffa and the available DHAP are used for building the PAs --> PA_list
	PA is further transformed to CDP-DG or TAG --> CDP_DG_synthase
	"""
	def __init__(self):
		self.timesteps = 100
		self.pyruvate_list = [pyruvate(3) for i in range(1000)]		#number of pyruvate available
		self.acetyl_coa_list = []
		self.dhap_list = [dhap(3) for i in range(100)]				#number of dhap available
		self.acyl_coa_list = []
		self.PA_list = []
		self.CDP_DG_list = []
		self.TAG_list = []
		self.co2_counter = 0
		self.t = [i for i in range(self.timesteps)]
		self.number_acetyl_coa = [0]
		self.number_acyl_coa = [0]
		self.number_pa = [0]
		self.number_cdp_dg = [0]
		self.number_tag = [0]

		self.chainlength_dict = {16: 'C16:0', 18: 'C18:0'}		#unsaturated ffa missing


		for t in range(self.timesteps):
			self.acetyl_coa_synthese()
			self.acyl_synthase()
			self.PA_synthase()
			self.CDP_DG_synthase()

		#control if pa is built correctly
		if len(self.acyl_coa_list) >= 2:
			for i in range(2):
				print self.acyl_coa_list[i].C
				print self.PA_list[i].sn1, self.PA_list[i].sn2, self.PA_list[i].head


		fig = mat.figure()
		ax = fig.add_axes([0.1, 0.1, 0.6, 0.75])
		ax.plot(self.t, self.number_acetyl_coa[:-1], label = 'acetyl_coa')
		ax.plot(self.t, self.number_acyl_coa[:-1], label = 'acyl_coa')
		ax.plot(self.t, self.number_pa[:-1], label = 'pa')
		ax.plot(self.t, self.number_cdp_dg[:-1], label = 'cdp-dg')
		ax.plot(self.t, self.number_tag[:-1], label = 'tag')
		ax.legend(bbox_to_anchor = (1.05, 1), loc = 2, borderaxespad = 0.)
		mat.show()

	def acetyl_coa_synthese(self):
		for i in range(10):							#10 acetyl_coa produced in 1 timestep
			if self.pyruvate_list[0].C == 3:
				self.pyruvate_list[0].C -= 1	
				self.pyruvate_list[0].__class__ = acetyl_coa 		# transformation from class pyruvate to class acetyl_coa
				self.acetyl_coa_list.append(self.pyruvate_list[0])
				del self.pyruvate_list[0]				
				self.co2_counter += 1
		self.number_acetyl_coa.append(len(self.acetyl_coa_list))
		#print 'Number of Acetyl-CoA: ' + str(len(self.acetyl_coa_list))

	def acyl_synthase(self):
		x = random.random()
		if x < 0.9:
			for i in range(20):						#20 reactions in 1 timestep but only with a probability of 90%
				if len(self.acetyl_coa_list) >= 2:	#control if at least 2 Acetyl-CoA are available
					if len(self.acyl_coa_list) == 0:		#starting the first reaction
						self.acetyl_coa_list[0].__class__ = acyl_coa
						self.acyl_coa_list.append(self.acetyl_coa_list[0])
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0:2]

					elif self.acyl_coa_list[-1].C >= 16 and x <= 0.45:	#stop the reaction cycle and starting a new one
						self.acetyl_coa_list[0].__class__ = acyl_coa
						self.acyl_coa_list.append(self.acetyl_coa_list[0])
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0:2]

					elif self.acyl_coa_list[-1].C >= 18:				#stop the reaction cycle and starting a new one
						self.acetyl_coa_list[0].__class__ = acyl_coa
						self.acyl_coa_list.append(self.acetyl_coa_list[0])
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0:2]
			
					else:									#adding an Acetyl_CoA to the growing ffa
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0]
		self.number_acyl_coa.append(len(self.acyl_coa_list))

		#print 'Number of built ffa: ' + str(len(self.acyl_coa_list))


	def PA_synthase(self):
		x = random.random()
		if x < 0.7:	
			if len(self.dhap_list) > 0 and len(self.acyl_coa_list) >= 2\
			and self.acyl_coa_list[0].C >= 16 and self.acyl_coa_list[1].C >= 16:		# available dhap and ffa
				chainlength_sn2 = self.acyl_coa_list[0].C
				chainlength_sn1 = self.acyl_coa_list[1].C
				pa = lipids('p', self.chainlength_dict[chainlength_sn2] ,self.chainlength_dict[chainlength_sn1])				# creating a new lipid: PA
				self.PA_list.append(pa)			
				del self.dhap_list[0] 			# deletion of the consumed dhap from the list of available dhap
				del self.acyl_coa_list[0:2]		# deletion of the 2 consumed ffa


	def CDP_DG_synthase(self):
		x = random.random()
		if x <= 0.1:
			if len(self.PA_list) > 0:
				self.PA_list[0].head = 'cdp'
				self.CDP_DG_list.append(self.PA_list[0])
				del self.PA_list[0]

		elif x <= 0.3:
			if len(self.acyl_coa_list) > 0 and len(self.PA_list) > 0:
				self.PA_list[0].head = 'None'
				self.TAG_list.append(self.PA_list[0])
				del self.PA_list[0]
				del self.acyl_coa_list[0]

		self.number_pa.append(len(self.PA_list))
		self.number_cdp_dg.append(len(self.CDP_DG_list))
		self.number_tag.append(len(self.TAG_list))