# -*- coding: utf-8 -*-
"""
Created on Wed June 03 2015

@author: Vera
"""

class lipids(object):
	"""
	general class for all kinds of lipids
		subclasses will be: PA, PI, PS, PE, PC, neutral 
		with the corresponding head groups 'p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral'
	"""
	def __init__(self, head):

		self.head_groups = ['p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral']

		self.head = head


	@property
	def head(self):
		return self.__head
	@head.setter
	def head(self, group):
		if group not in self.head_groups:
			raise TypeError('This is no head group.')
		self.__head = group

class PA(lipids):
	"""
	lipid subclass
	first lipid that is built out of the precursors --> is precursor itself for all other lipids
	head: 'p'
	"""
	def __init__(self, head):
		super(PA, self).__init__(head)



class precursors(object):
	"""
	class for all the small molecules that are needed to create the lipids
	subclasses will be pyruvate, acetyl_coa, acyl_coa, dhap
	attribute C: number of C-Atoms
	"""
	def __init__(self, C):
		self.C = C

	@property
	def C(self):
		return self.__C
	@C.setter
	def C(self, number):
		if not isinstance(number, int):
			raise TypeError('Number of C-Atoms must be an int.')
		self.__C = number


class pyruvate(precursors):
	"""
	Pyruvate is the main precursor for lipid synthesis and is produced in the glycolysis. Pyruvate is transformed to Acetyl-CoA by the 
	Pyruvate dehydrogenase with release of CO2. This process is integrated as a function in the class -->
	every initial pyruvate will become an Acetyl-CoA immediately.
	"""
	def __init__(self, C):
		super(pyruvate, self).__init__(C)

		self.C = 3

		self.reaction()
		self.transformation()

	def reaction(self):
		if self.C == 3:	
			self.C -=1 			# release of CO2

	def transformation(self):
		if self.C == 2:
			self.__class__ = acetyl_coa 		# transformation from class pyruvate to class acetyl_coa


class acetyl_coa(precursors):
	"""
	Acetyl-CoA is generated by transformation of pyruvate. One Acetyl-CoA (C = 2) is one building block for the ffa, so
	8 Acetyl-CoAs are needed for one ffa (C = 16) --> acyl_synthase
	"""
	def __init__(self, C):
		super(acetyl_coa, self).__init__(C)


class acyl_coa(precursors):
	"""
	Acyl-CoA = ffa
	2 ffa are needed to construct a lipid --> PA_synthase
	At the moment there is only one kind of ffa: saturated and with 16 C-Atoms
	"""
	def __init__(self, C):
		super(acyl_coa, self).__init__(C)

		self.C = 16

class dhap(precursors):
	"""
	DHAP is the backbone for the lipids. In PA_synthase we add 2 ffa to one DHAP-Molecule to have a PA_synthase
	DHAP is generated in the glycolysis
	"""
	def __init__(self, C):
		super(dhap, self).__init__(C)

		self.C = 3


class model:
	"""
	The model. 
	At the beginning we set the available number of pyruvate and DHAP in the start function --> Acetyl-CoA_list and dhap_list
	In the acyl_synthase reaction we use 8 Acetyl-CoA to synthesise Acyl-CoA --> acyl_coa_list
	These ffa and the avilable DHAP are used for building the PAs --> PA_list
	"""
	def __init__(self):
		self.timesteps = 20
		self.acetyl_coa_list = []
		self.dhap_list = []
		self.acyl_coa_list = []
		self.PA_list = []
		self.co2_counter = 0
		
		self.start()
		self.acyl_synthase()
		self.PA_synthase()


	def start(self):
		for i in range(100):
			pyr = pyruvate(3)			
			self.co2_counter += 1
			self.acetyl_coa_list.append(pyr)		# initial number of pyruvate = number of acetyl_coa = len(acetyl_coa_list)

		for j in range(50):
			d = dhap(3)
			self.dhap_list.append(d)			# initial number of dhap = len(dhap_list)

		print 'Start Acetyl-CoA: ' + str(len(self.acetyl_coa_list))
		print 'Start DHAP: ' + str(len(self.dhap_list))
		print 'Released CO2: ' + str(self.co2_counter)

	def acyl_synthase(self):
		x = len(self.acetyl_coa_list)/8 		# 8 acetyl_coa needed for acyl_coa synthesis
		for i in range(x):						# synthesis as often as number of acetyl_coa can be divided by 8
			del self.acetyl_coa_list[0:9]		# deletion of 8 acetyl_coa molecules from their list
			ffa = acyl_coa 						# creating a ffa molecule in class acyl_coa
			self.acyl_coa_list.append(ffa)		

		print 'Number of built ffa: ' + str(len(self.acyl_coa_list))

	def PA_synthase(self):
		x = len(self.dhap_list)					# available dhap
		for i in range(x):
			if len(self.acyl_coa_list) >= 2 : 	# test if there are enough available ffa: for PA-synthesis 2 ffa are needed
				pa = PA('p')					# creating a new lipid: PA
				self.PA_list.append(pa)			
				del self.dhap_list[0] 			# deletion of the consumed dhap from the list of available dhap
				del self.acyl_coa_list[0:2]		# deletion of the 2 consumed ffa

		print 'Number of built PA: ' + str(len(self.PA_list))
		print 'Number of unused dhap: ' + str(len(self.dhap_list))
		print 'Number of unused ffa: ' + str(len(self.acyl_coa_list))

