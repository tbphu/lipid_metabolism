# -*- coding: utf-8 -*-
"""
Created on Wed June 03 2015

@author: Vera
"""
import matplotlib.pyplot as mat
import random

class lipids(object):
	"""
	general class for all kinds of lipids
		subclasses will be: PA, PI, PS, PE, PC, neutral 
		with the corresponding head groups 'p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral', 'cdp'
	"""
	def __init__(self, head):

		self.head_groups = ['p', 'inositol', 'serine', 'ethanolamine', 'choline', 'neutral', 'cdp', 'None']

		self.head = head


	@property
	def head(self):
		return self.__head
	@head.setter
	def head(self, group):
		if group not in self.head_groups:
			raise TypeError('This is no head group.')
		self.__head = group



class precursors(object):
	"""
	class for all the small molecules that are needed to create the lipids
	subclasses will be pyruvate, acetyl_coa, acyl_coa, dhap
	attribute C: number of C-Atoms
	"""
	def __init__(self, C):
		self.C = C

	@property
	def C(self):
		return self.__C
	@C.setter
	def C(self, number):
		if not isinstance(number, int):
			raise TypeError('Number of C-Atoms must be an int.')
		self.__C = number


class pyruvate(precursors):
	"""
	Pyruvate is the main precursor for lipid synthesis and is produced in the glycolysis. Pyruvate is transformed to Acetyl-CoA by the 
	Pyruvate dehydrogenase with release of CO2. This process is integrated as a function in the class -->
	every initial pyruvate will become an Acetyl-CoA immediately.
	"""
	def __init__(self, C):
		super(pyruvate, self).__init__(C)

		self.C = 3



class acetyl_coa(precursors):
	"""
	Acetyl-CoA is generated by transformation of pyruvate. One Acetyl-CoA (C = 2) is one building block for the ffa, so
	8 Acetyl-CoAs are needed for one ffa (C = 16) --> acyl_synthase
	"""
	def __init__(self, C):
		super(acetyl_coa, self).__init__(C)


class acyl_coa(precursors):
	"""
	Acyl-CoA = ffa
	2 ffa are needed to construct a lipid --> PA_synthase
	At the moment there is only one kind of ffa: saturated and with 16 C-Atoms
	"""
	def __init__(self, C):
		super(acyl_coa, self).__init__(C)


class dhap(precursors):
	"""
	DHAP is the backbone for the lipids. In PA_synthase we add 2 ffa to one DHAP-Molecule to have a PA_synthase
	DHAP is generated in the glycolysis
	"""
	def __init__(self, C):
		super(dhap, self).__init__(C)

		self.C = 3


class model:
	"""
	The model. 
	At the beginning we set the available number of pyruvate and DHAP in the start function --> Acetyl-CoA_list and dhap_list
	In the acyl_synthase reaction we use 8 Acetyl-CoA to synthesise Acyl-CoA --> acyl_coa_list
	These ffa and the available DHAP are used for building the PAs --> PA_list
	"""
	def __init__(self):
		self.timesteps = 40
		self.pyruvate_list = [pyruvate(3) for i in range(500)]
		self.acetyl_coa_list = []
		self.dhap_list = [dhap(3) for i in range(20)]
		self.acyl_coa_list = []
		self.PA_list = []
		self.CDP_DG_list = []
		self.TAG_list = [0]
		self.co2_counter = 0
		self.t = [i for i in range(self.timesteps)]
		self.number_acetyl_coa = [0]
		self.number_acyl_coa = [0]
		self.number_pa = [0]
		self.number_cdp_dg = [0]
		self.number_tag = [0]


		for t in range(self.timesteps):
			self.acetyl_coa_synthese()
			self.acyl_synthase()
			self.PA_synthase()
			self.CDP_DG_synthase()
		fig = mat.figure()
		ax = fig.add_axes([0.1, 0.1, 0.6, 0.75])
		ax.plot(self.t, self.number_acetyl_coa[:-1], label = 'acetyl_coa')
		ax.plot(self.t, self.number_acyl_coa[:-1], label = 'acyl_coa')
		ax.plot(self.t, self.number_pa[:-1], label = 'pa')
		ax.plot(self.t, self.number_cdp_dg[:-1], label = 'cdp-dg')
		ax.plot(self.t, self.number_tag[:-1], label = 'tag')
		ax.legend(bbox_to_anchor = (1.05, 1), loc = 2, borderaxespad = 0.)			#bbox_to_anchor=(1., 1), loc=2, borderaxespad=0.5
		#mat.tight_layout()
		mat.show()

	def acetyl_coa_synthese(self):
		for i in range(3):
			if self.pyruvate_list[0].C == 3:	
				self.pyruvate_list[0].__class__ = acetyl_coa
				self.acetyl_coa_list.append(self.pyruvate_list[0])
				del self.pyruvate_list[0]								# transformation from class pyruvate to class acetyl_coa
		self.number_acetyl_coa.append(len(self.acetyl_coa_list))
		#print 'Number of Acetyl-CoA: ' + str(len(self.acetyl_coa_list))

	def acyl_synthase(self):
		x = random.random()
		if x < 0.8:
			for i in range(3):
				if len(self.acetyl_coa_list) >= 2:
					if len(self.acyl_coa_list) == 0 or self.acyl_coa_list[-1].C >= 16:
						self.acetyl_coa_list[0].C -= 1
						self.acetyl_coa_list[0].__class__ = acyl_coa
						self.acyl_coa_list.append(self.acetyl_coa_list[0])
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0:2]
						self.co2_counter += 1
		
					else:
						self.acyl_coa_list[-1].C += 2
						del self.acetyl_coa_list[0]
						self.co2_counter += 1
		self.number_acyl_coa.append(len(self.acyl_coa_list))

		#print 'Number of built ffa: ' + str(len(self.acyl_coa_list))


	def PA_synthase(self):
		x = random.random()
		if x < 0.8:	
			if len(self.dhap_list) > 0:					# available dhap
				for i in range(2):
					if len(self.acyl_coa_list) >= 2 : 	# test if there are enough available ffa: for PA-synthesis 2 ffa are needed
						pa = lipids('p')				# creating a new lipid: PA
						self.PA_list.append(pa)			
						del self.dhap_list[0] 			# deletion of the consumed dhap from the list of available dhap
						del self.acyl_coa_list[0:2]		# deletion of the 2 consumed ffa


	def CDP_DG_synthase(self):
		x = random.random()
		if x <= 0.3:
			if len(self.PA_list) > 0:
				self.PA_list[0].head = 'cdp'
				self.CDP_DG_list.append(self.PA_list[0])
				del self.PA_list[0]

		elif x <= 0.6:
			if len(self.acyl_coa_list) > 0 and len(self.PA_list) > 0:
				self.PA_list[0].head = 'None'
				self.TAG_list.append(self.PA_list[0])
				del self.PA_list[0]
				del self.acyl_coa_list[0]

		self.number_pa.append(len(self.PA_list))
		self.number_cdp_dg.append(len(self.CDP_DG_list))
		self.number_tag.append(len(self.TAG_list))